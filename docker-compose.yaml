networks:
    qnetwork:
    database:
        driver: bridge
    web:
        driver: bridge
    queue:
        driver: bridge

volumes:
    database:
        driver: local
    fmeflow:
        driver: local
    sslcerts:
        driver: local

services:

    extract:
        build: ./extract
        depends_on:
            pgsql:
                condition: service_healthy
        environment: 
            - JAVA_OPTS=-Xms1G -Xmx2G 
              -Dspring.datasource.url="jdbc:postgresql://pgsql:5432/extract" 
              -Dspring.datasource.username=extractuser 
              -Dspring.datasource.password=demopassword 
              -Duser.language=en -Duser.region=CH -Dcom.sun.jndi.ldap.connect.pool.timeout=20000
        ports:
            - "8080:8080"
        healthcheck:
            test: curl --fail http://localhost:8080/extract || exit 1
            interval: 10s
            timeout: 10s
            retries: 15

    geoshop:
        build: ./geoshop
        depends_on: 
            postgis:
                condition: service_healthy
        environment:
            - POSTGRES_HOST=postgis
            - POSTGRES_USER=geoshop
            - POSTGRES_DB=geoshop
            - POSTGRES_PASSWORD=geoshop
        ports: 
            - "8000:8000"
        healthcheck:
            test: curl --fail http://localhost:8000 || exit 1
            interval: 10s
            timeout: 10s
            retries: 15       

    # Postgis
    postgis:
        image: postgis/postgis:12-3.4-alpine
        environment:
            - POSTGRES_DB=geoshop
            - POSTGRES_USER=geoshop
            - POSTGRES_PASSWORD=geoshop
        ports:
            - "54320:5432"
        volumes:
          - ./geoshop/postgis:/docker-entrypoint-initdb.d/
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U geoshop"]
            interval: 5s
            timeout: 5s
            retries: 5

    # Postgres
    pgsql:
        image: postgres:12-alpine
        environment:
            - POSTGRES_DB=extract
            - POSTGRES_USER=extractuser
            - POSTGRES_PASSWORD=demopassword
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U extractuser" -d postgres]
            interval: 5s
            timeout: 5s
            retries: 5

    updatedb:
        image: postgres:12-alpine
        depends_on:
            extract:
                condition: service_healthy
        environment:
            - PGHOST=pgsql
            - PGDB=extract
            - PGUSER=extractuser
            - PGPASSWORD=demopassword
        volumes:
            - ./updatedb:/updatedb
        entrypoint: /updatedb/update.sh

    # Mailhog
    mailhog:
        image: mailhog/mailhog
        tty: true
        ports:
            - "1025:1025"
            - "8025:8025"
        volumes:
            - ./mailhog:/home/mailhog/conf
        entrypoint: MailHog -auth-file=/home/mailhog/conf/auth-users

    # LDAP
    openldap:
        image: osixia/openldap:1.5.0
        environment:
            - LDAP_ORGANISATION=Extract
            - LDAP_DOMAIN=extract.org
            - LDAP_ADMIN_PASSWORD=extract
            - LDAP_CONFIG_PASSWORD=extract
            - LDAP_RFC2307BIS_SCHEMA=true
            - LDAP_REMOVE_CONFIG_AFTER_SETUP=true
            - LDAP_TLS_VERIFY_CLIENT=try
        ports:
            - "389:389"
            - "636:636"

    ldap-ad:
        build: ./ldap-ad
        volumes:
            - ./ldap-ad/users.ldif:/ldap/users.ldif
        ports:
            - "10389:10389"

    # QGIS
    qgisserver:
        image: camptocamp/qgis-server
        volumes:
            - ./qgis/project:/etc/qgisserver
        environment:
            - QGIS_PROJECT_FILE=/etc/qgisserver/world.qgs
            - QGIS_SERVER_LANDING_PAGE_PROJECTS_DIRECTORIES=/etc/qgisserver
        networks:
            - qnetwork

    qgisproxy:
        depends_on:
            qgisserver:
                condition: service_started
        build:
            context: ./qgis
        hostname: qgisproxy
        container_name: qgisproxy
        volumes:
            - ./qgis/nginx.conf:/etc/nginx/nginx/conf:ro
        ports:
            - 8888:80
        networks:
            - qnetwork
            - default

    # FME
    # To disable HTTPS, start with ENV vars WEBPROTOCOL=http EXTERNALPORT=80 and comment port 80 out in the nginx section.
    # Custom HTTPS certificate: Start with ENV var SSLCERTLOCATION=/local/path/to/ssslcert

    fmeflowdb:
        image: postgres:16.1-bullseye
        environment:
            - POSTGRES_PASSWORD=pgadmin
        volumes:
            - 'database:/var/lib/postgresql/data'
        restart: always
        networks:
            - database
        healthcheck:
            test: pg_isready --host fmeflowdb -U fmeflow || exit 1
            interval: 10s
            timeout: 5s
            retries: 6

    fmeflowcore:
        image: 'docker.io/safesoftware/fmeflow-core:24612'
        environment:
            - PRIMARY_PROCESS=core
            - EXTERNALHOSTNAME=${EXTERNALHOSTNAME:-localhost}
            - EXTERNALPORT=${EXTERNALPORT:-443}
            - WEBPROTOCOL=${WEBPROTOCOL:-https}
            - RUNSETUP=true
            - DEBUGLEVEL=NONE
        volumes:
            - 'fmeflow:/data/fmeflowdata'
        hostname: fmeflowcore
        restart: always
        healthcheck:
            test: nc -z fmeflowcore 7071 || exit 1
            interval: 10s
            timeout: 1s
            retries: 6
        depends_on:
            - fmeflowdb
            - fmeflowqueue
            - fmeflowdbinit
        networks:
            - database
            - web
            - queue

    fmeflowdbinit:
        image: 'docker.io/safesoftware/fmeflow-core:24612'
        networks:
            - database
        restart: "no"
        depends_on:
            - fmeflowdb
        environment:
            - PRIMARY_PROCESS=initpgsql
            - PGSQLADMINPASSWORD=pgadmin

    fmeflowwebsocket:
        image: 'docker.io/safesoftware/fmeflow-core:24612'
        environment:
            - PRIMARY_PROCESS=websocket
        volumes:
            - 'fmeflow:/data/fmeflowdata'
        hostname: fmeflowwebsocket
        restart: always
        healthcheck:
            test: nc -z fmeflowwebsocket 7078 || exit 1
            interval: 10s
            timeout: 1s
            retries: 6
        networks:
            - web

    fmeflowqueue:
        image: 'docker.io/safesoftware/fmeflow-queue:24612'
        volumes:
            - 'fmeflow:/data/fmeflowdata'
        hostname: fmeflowqueue
        restart: always
        healthcheck:
            test: redis-cli -a sozPpbLfgdI9WJoPejNMpSxGw -h fmeflowqueue ping || exit 1
            interval: 5s
            timeout: 1s
            retries: 5
        networks:
            - queue
            - web

    nginx:
        image: 'docker.io/safesoftware/fmeflow-nginx-proxy:24612'
        environment:
            - EXTERNALHOSTNAME=${EXTERNALHOSTNAME:-localhost}
            - EXTERNALPORT=${EXTERNALPORT:-443}
            - WEBPROTOCOL=${WEBPROTOCOL:-https}
            - NGINX_WORKER_PROCESSES=${NGINX_WORKER_PROCESSES:-1}
        ports:
            - '${EXTERNALPORT:-443}:8443'
            # HTTP to HTTPS port, enable if protocol is https and redirect is requested
            - 80:8080
        restart: always
        healthcheck:
            test: wget --quiet --tries=1 --spider http://nginx:8080/healthz || exit 1
            interval: 10s
            timeout: 5s
            retries: 6
        networks:
            - web
        volumes:
            - '${SSLCERTLOCATION:-sslcerts}:/etc/ssl/private'
        depends_on:
            - fmeflowweb
            - fmeflowwebsocket
            - fmeflowcore

    fmeflowweb:
        image: 'docker.io/safesoftware/fmeflow-web:24612'
        volumes:
            - 'fmeflow:/data/fmeflowdata'
        environment:
            - EXTERNALHOSTNAME=${EXTERNALHOSTNAME:-localhost}
            - EXTERNALPORT=${EXTERNALPORT:-443}
            - WEBPROTOCOL=${WEBPROTOCOL:-https}
            - DEBUGLEVEL=NONE
        hostname: fmeflowweb
        restart: always
        healthcheck:
            test: wget --quiet --tries=1 --spider http://fmeflowweb:8080/ || exit 1
            interval: 10s
            timeout: 5s
            retries: 6
        depends_on:
            - fmeflowcore
        networks:
            - web
            - database

    fmeflowutilityengine:
        image: 'docker.io/safesoftware/fmeflow-engine:24612'
        volumes:
            - 'fmeflow:/data/fmeflowdata'
        restart: always
        depends_on:
            - fmeflowcore
        environment:
            - EXTERNALPORT=${EXTERNALPORT:-443}
            - WEBPROTOCOL=${WEBPROTOCOL:-https}
            - DEBUGLEVEL=NONE
            - ENGINETYPE=UTILITY
        # This is to prevent sick engines from generating too many core dump files. Remove this if you would like to enable core dumps by the engine
        ulimits:
            core:
                hard: 0
                soft: 0
        networks:
            - database
            - web

    fmeflowengine:
        image: 'docker.io/safesoftware/fmeflow-engine:24612'
        volumes:
            - 'fmeflow:/data/fmeflowdata'
        restart: always
        depends_on:
            - fmeflowcore
        environment:
            - EXTERNALPORT=${EXTERNALPORT:-443}
            - WEBPROTOCOL=${WEBPROTOCOL:-https}
            - DEBUGLEVEL=NONE
        # This is to prevent sick engines from generating too many core dump files. Remove this if you would like to enable core dumps by the engine
        ulimits:
            core:
                hard: 0
                soft: 0
        networks:
            - database
            - web

  # --- Uncomment to deploy CPU-Usage Engines with FME Server ---

  # fmeflowenginedynamic:
  #   image: 'docker.io/safesoftware/fmeflow-engine:24612'
  #   volumes:
  #      - 'fmeflow:/data/fmeflowdata'
  #   restart: always
  #   depends_on:
  #     - fmeflowcore
  #   environment:
  #     - EXTERNALHOSTNAME=${EXTERNALHOSTNAME:-localhost}
  #     - EXTERNALPORT=${EXTERNALPORT:-443}
  #     - WEBPROTOCOL=${WEBPROTOCOL:-https}
  #     - ENGINETYPE=DYNAMIC
  #   networks:
  #     - database
  #     - web
  # -------------------------------------------------------------
